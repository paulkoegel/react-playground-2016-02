5a6
> 
14a16,35
>   changeTitle({ target: { value } }) {
>     return;
>     // this.setState({
>     //   isValid: value <= 50
>     // });
>   }
> 
>   changeAuthor({ target: { value } }) {
>     return;
>   }
> 
>   enterEditMode() {
>     this.setState({ editing: true });
>   }
> 
>   saveBook() {
>     this.props.saveBook(this.props.id, this.refs.title.value, this.refs.author.value)
>     //this.setState({ editing: false });
>   }
> 
17a39
>       // multiple classes: className={ [ (this.props.selected ? 'selected' : null), (this.state.fadeOut ? 'fadeOut' : null) ].join(' ') }
20,22c42
<         <h1>{ title }</h1>
<         <h2>{ author }</h2>
< 
---
>         
30a51,53
>         <div className='close' onClick={ () => this.props.handleRemove(this.props) }>
>           x
>         </div>
45c68
<   text: React.PropTypes.string
---
>   text: React.PropTypes.string.isRequired
54c77,79
<       selectedId: null
---
>       selectedId: null,
>       showForm: false,
>       books: props.books
58a84
>     console.log('addToCart:', this, id);
63a90,116
>   addBook() {
>     this.setState({
>       books: [ { title: 'edit me', text: 'some description'}, ...this.state.books ]
>     });
>   }
> 
>   removeBook(book) {
>     console.log('removeBook');
>     this.setState({
>       ...this.state,
>       books: this.state.books.filter(b => b.title !== book.title)
>     });
>   }
> 
>   saveBook(id, title, author) {
>     let books = {
>       ...this.state.books,
>       [id]: { // !!!
>         ...this.state.books[id],
>         title,
>         author
>       }
>     };
> 
>     this.setState({ books }) //object literal shorthand
>   }
> 
65d117
<     let selectedBook = this.props.books[this.state.selectedId];
72c124
<             { (selectedBook && selectedBook.title) || '- empty -' }
---
>             { this.state.selectedId || '- empty -' }
74a127,131
>         
>         <button className='addBook' onClick={ this.addBook.bind(this) }>
>           Add Book
>         </button>
> 
76,84c133,145
<           { Object.keys(this.props.books).map((bookId, index) => {
<             let book = this.props.books[bookId];
<             return <li key={ index } className={ this.state.selectedId === bookId ? 'selected' : null }>
<               <Book { ...book }
<                 id={ bookId }
<                 addToCart={ this.addToCart.bind(this) }
<               />
<             </li>
<           }) }
---
>           { Object.keys(this.state.books).map((bookId, index) => {
>               let book = this.state.books[bookId];
>               return(
>                 <li key={ index } className={ this.state.selectedId === bookId ? 'selected' : null }>
>                   <Book { ...book }
>                     id={ bookId }
>                     addToCart={ this.addToCart.bind(this) }
>                     handleRemove={ this.removeBook.bind(this) }
>                     saveBook={ this.saveBook(this) }
>                   />
>                 </li>);
>             })
>           }
